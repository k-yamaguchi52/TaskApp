{"version":3,"sources":["components/Navigation/index.tsx","redux/todo.ts","components/AddTaskDialog/index.tsx","components/TodoList/index.tsx","components/AddListDialog/index.tsx","components/MessageDialog/index.tsx","components/SideNav/presentation.tsx","components/SideNav/container.tsx","components/TodoDetail/index.tsx","App.tsx","reportWebVitals.ts","redux/configureStore.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","title","button","marginRight","spacing","Navigation","classes","projectList","useSelector","state","selectedProjectId","AppBar","position","Toolbar","Typography","variant","className","todoSlice","createSlice","name","initialState","todoList","doneList","id","reducers","taskCreated","action","uuid","Date","payload","taskDone","task","taskUpdated","data","taskDeleted","projectCreated","projectUpdated","project","projectDeleted","Object","keys","taskId","projectId","taskSelected","selectedTaskId","projectSelected","spacer","top","bottom","margin","AddTaskDialog","open","onClose","useState","setTitle","deadline","setDeadline","description","setDescription","dispatch","useDispatch","actions","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Grid","container","alignItems","justify","style","item","xs","TextField","placeholder","value","onChange","e","target","disableToolbar","format","label","undefined","KeyboardButtonProps","multiline","rowsMax","DialogActions","Button","onClick","color","deadlineStr","toISOString","width","padding","TodoList","dialogOpen","setDialogOpen","Paper","List","ListItem","ListItemIcon","Add","ListItemText","primary","Divider","component","values","filter","map","selected","ListItemSecondaryAction","IconButton","CheckCircle","AddListDialog","handleClickAddButton","required","MessageDialog","content","handleClickButton","DialogContentText","SideNav","setSelectedProjectId","addProject","deleteProject","setSelectedTaskId","deleteDialogOpen","setDeleteDialogOpen","addDialogOpen","setAddDialogOpen","handleClickOpenDeleteDialog","disabled","Delete","EnhancedSideNav","delete","marginLeft","TodoDetail","handleChange","Card","CardActions","size","CardContent","Toc","newTask","handleChangeTitle","Schedule","handleChangeDeadline","Create","handleChangeDescription","display","minHeight","main","aside","minWidth","App","orientation","flexItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","persistConfig","key","storage","persistedReducer","persistReducer","reducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistStore","ReactDOM","render","utils","DateFnsUtils","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7872f8e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  createStyles,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { useSelector } from \"react-redux\";\nimport { TodoState, Project } from \"../../redux/todo\";\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n    },\n    button: {\n      marginRight: theme.spacing(2),\n    },\n  });\n});\n\nexport const Navigation: FC = () => {\n  const classes = useStyles();\n  const projectList = useSelector<TodoState, { [id: string]: Project }>(\n    (state) => state.projectList\n  );\n  const selectedProjectId = useSelector<TodoState, string>(state => state.selectedProjectId);\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {projectList[selectedProjectId] ? projectList[selectedProjectId].title : \"TODO 管理\"}\n          </Typography>\n          {/* <Button color=\"inherit\">全て</Button>\n          <Button color=\"inherit\">状態ごと</Button>\n          <Button color=\"inherit\">プロジェクトごと</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { uuid } from \"uuidv4\";\n\nexport type Task = {\n  id: string;\n  title: string;\n  deadline?: string;\n  description: string;\n  // createdAt: Date;\n  projectId: string;\n};\n\nexport type Project = {\n  id: string;\n  title: string;\n  // createdAt: Date;\n};\n\nexport type TodoState = {\n  todoList: { [id: string]: Task };\n  doneList: { [id: string]: Task };\n  projectList: { [id: string]: Project };\n  selectedTaskId?: string;\n  selectedProjectId: string;\n};\n\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState: {\n    todoList: {},\n    doneList: {},\n    projectList: {\"mytask\": {id: \"mytask\", title: \"MyTask\"}},\n    selectedProjectId: \"mytask\",\n  } as TodoState,\n  reducers: {\n    taskCreated: (\n      state,\n      action: PayloadAction<\n        Pick<Task, \"title\" | \"deadline\" | \"description\" | \"projectId\">\n      >\n    ) => {\n      const id = uuid();\n      const createdAt = new Date();\n      state.todoList[id] = { ...action.payload, id};\n    },\n    taskDone: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const task = state.todoList[id];\n\n      if (task) {\n        state.doneList[id] = { ...task };\n        delete state.todoList[id];\n      }\n    },\n    taskUpdated: (state, action: PayloadAction<Task>) => {\n      const { id, ...data } = action.payload;\n      const task = state.todoList[id];\n      if (task) state.todoList[id] = { ...task, ...data };\n    },\n    taskDeleted: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const task = state.todoList[id];\n      if (task) {\n        delete state.todoList[id];\n      }\n    },\n\n    projectCreated: (state, action: PayloadAction<Pick<Project, \"title\">>) => {\n      const id = uuid();\n      state.projectList[id] = { ...action.payload, id};\n    },\n    projectUpdated: (\n      state,\n      action: PayloadAction<Project>\n    ) => {\n      const { id, ...data } = action.payload;\n      const project = state.projectList[id];\n      if (project) state.projectList[id] = { ...project, ...data };\n    },\n    projectDeleted: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const project = state.projectList[id];\n      if (project) {\n        delete state.projectList[id];\n        for (let taskId of Object.keys(state.todoList)) {\n          const task = state.todoList[taskId];\n          if (task.projectId === id) {\n            delete state.todoList[taskId];\n          }\n        }\n        for (let taskId of Object.keys(state.doneList)) {\n          const task = state.doneList[taskId];\n          if (task.projectId === id) {\n            delete state.doneList[taskId];\n          }\n        }\n      }\n    },\n\n    taskSelected: (state, action: PayloadAction<string|undefined>) => {\n      const id = action.payload;\n      state.selectedTaskId = id;\n    },\n    projectSelected: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const project = state.projectList[id];\n      if(project || id===\"\") state.selectedProjectId = id;\n    }\n  },\n});\n","import React, {FC, useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Grid,\n    IconButton,\n    TextField,\n    Typography,\n  } from \"@material-ui/core\";\nimport { Project, Task, todoSlice, TodoState } from \"../../redux/todo\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst spacer = (top: number, bottom: number) => ({\n    margin: `${top}px 0 ${bottom}px 0`,\n  });\n  \n\n  type Props = {\n    open: boolean;\n    onClose: () => void;\n  };\n\n  const AddTaskDialog: FC<Props> = ({open, onClose}) => {\n      \n  const [title, setTitle] = useState<string>(\"\");\n  const [deadline, setDeadline] = useState<Date | null>(null);\n  const [description, setDescription] = useState<string>(\"\");\n\n  const projectList = useSelector<TodoState, { [id: string]: Project}>(state => state.projectList);\n  const selectedProjectId = useSelector<TodoState, string>(state => state.selectedProjectId);\n  const dispatch = useDispatch();\n  const { taskCreated } = todoSlice.actions;\n\n  const handleClickAddButton = ():void => {\n    const deadlineStr = deadline?.toISOString();\n    const newTask: Pick<Task, \"title\" | \"deadline\" | \"description\" | \"projectId\">\n      = deadline ? {title, deadline: deadlineStr, description, projectId: selectedProjectId} : {title, description, projectId: selectedProjectId};\n      dispatch(taskCreated(newTask));\n      setTitle(\"\");\n      setDeadline(null);\n      setDescription(\"\");\n      onClose();\n  }\n\n      return (\n        <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          タスクを追加\n        </DialogTitle>\n        <DialogContent>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"space-between\" style={spacer(0, 0)}>\n          <Grid item xs={10}>\n            {/* <Typography variant=\"h5\" component=\"h2\">{todoItem.title}</Typography> */}\n            <TextField placeholder=\"タイトル\" value={title} onChange={e => setTitle(e.target.value)} />\n          </Grid>\n        </Grid>\n        <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justify=\"space-between\"\n          style={spacer(20, 0)}\n        >\n          <Grid item xs={10}>\n            {/* <Typography>{todoItem.date}</Typography> */}\n            <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"yyyy年M月d日\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"日時を選択\"\n          value={deadline}\n          onChange={e => e ? setDeadline(e) : undefined}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n          </Grid>\n        </Grid>\n        {/* <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justify=\"space-between\"\n          style={spacer(20, 0)}\n        >\n          <Grid item xs={10}>\n            <Typography>{projectList[selectedProjectId].title}</Typography>\n          </Grid>\n        </Grid> */}\n        <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justify=\"space-between\"\n          style={spacer(20, 15)}\n        >\n\n          <Grid item xs={10}>\n            {/* <Typography>{todoItem.description}</Typography> */}\n            <TextField\n          id=\"standard-multiline-flexible\"\n        //   label=\"Multiline\"\n          placeholder=\"メモ\"\n          multiline\n          rowsMax={4}\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n        />\n          </Grid>\n        </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n              キャンセル\n          </Button>\n          <Button onClick={handleClickAddButton} color=\"primary\">\n              追加\n          </Button>\n        </DialogActions>\n      </Dialog>\n      )\n  };\n\n  export default AddTaskDialog;\n\n","import React, { FC, useState } from \"react\";\nimport {\n  List,\n  ListItem,\n  createStyles,\n  ListItemText,\n  makeStyles,\n  Theme,\n  Typography,\n  Divider,\n  ListItemSecondaryAction,\n  IconButton,\n  ListItemIcon,\n  Paper,\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Add, AddCircle, AddCircleOutline, CheckCircle } from \"@material-ui/icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Project, Task, todoSlice, TodoState } from \"../../redux/todo\";\nimport AddTaskDialog from \"../AddTaskDialog\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      // maxWidth: 360,\n      padding: \"10px\",\n    },\n  })\n);\n\nconst TodoList: FC = () => {\n  const classes = useStyles();\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const handleOpenDialog = () => {\n    setDialogOpen(true);\n  };\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n\n  const todoList = useSelector<TodoState, { [id: string]: Task }>(\n    (state) => state.todoList\n  );\n  const selectedProjectId = useSelector<TodoState, string>(\n    (state) => state.selectedProjectId\n  );\n  const selectedTaskId = useSelector<TodoState, string | undefined>(\n    (state) => state.selectedTaskId\n  );\n  const { taskSelected, taskDone } = todoSlice.actions;\n  const dispatch = useDispatch();\n\n  const handleClickTask = (taskId: string) => {\n    dispatch(taskSelected(taskId));\n  };\n\n  const handleClickDoneButton = (taskId: string) => {\n    dispatch(taskDone(taskId));\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <List>\n        <ListItem key=\"addButton\" button onClick={handleOpenDialog}>\n          <ListItemIcon>\n            <Add />\n          </ListItemIcon>\n          <ListItemText primary=\"タスクを追加\" />\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" /> \n        </List>\n        <List>\n          {/* <Divider></Divider> */}\n        {/* <Divider variant=\"inset\" component=\"li\" /> */}\n        {Object.values(todoList)\n          .filter((task) => task.projectId === selectedProjectId)\n          .map((task) => (\n            <ListItem\n              key={task.id}\n              button\n              alignItems=\"flex-start\"\n              onClick={(e) => handleClickTask(task.id)}\n              selected={selectedTaskId === task.id}\n            >\n              <ListItemText primary={task.title} />\n              <ListItemSecondaryAction>\n                <IconButton onClick={(e) => handleClickDoneButton(task.id)}>\n                  <CheckCircle />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n      </List>\n      <AddTaskDialog\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n      ></AddTaskDialog>\n    </Paper>\n  );\n};\n\nexport default TodoList;\n","import React, {FC, useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n  } from \"@material-ui/core\";\nimport { Project } from \"../../redux/todo\";\n\n  type Props = {\n    open: boolean;\n    onClose: () => void;\n    handleClickAddButton: (project: Pick<Project, \"title\">) => void;\n  };\n  \n\nconst AddListDialog: FC<Props> = ({ open, onClose, handleClickAddButton = () => undefined }) => {\n\n  const [title, setTitle] = useState<string>(\"\");\n\n    return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          追加するリストのタイトル\n        </DialogTitle>\n        <DialogContent>\n          <TextField required id=\"standard-required\" label=\"Required\" value={title} onChange={e => setTitle(e.target.value)}/>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n              キャンセル\n          </Button>\n          <Button onClick={e => handleClickAddButton({title})} color=\"primary\">\n              追加\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  export default AddListDialog;","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Grid,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { FC } from \"react\";\n\ntype Props = {\n  title: string;\n  content: string;\n  open: boolean;\n  onClose: () => void;\n  handleClickButton: () => void;\n};\n\nconst MessageDialog: FC<Props> = ({ title, content, open, onClose, handleClickButton }) => {\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {title}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n            キャンセル\n        </Button>\n        <Button onClick={handleClickButton} color=\"primary\">\n            はい\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default MessageDialog;\n","import {\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText\n} from \"@material-ui/core\";\nimport { Add, Delete } from \"@material-ui/icons\";\nimport React, { FC, useState } from \"react\";\n\nimport AddListDialog from \"../AddListDialog\";\nimport MessageDialog from \"../MessageDialog\";\nimport { Project } from \"../../redux/todo\";\n\n\ntype Props = {\n  projectList: Project[];\n  setSelectedProjectId : (id: string) => void;\n  selectedProjectId: string;\n  addProject: (project: Pick<Project, \"title\">) => void;\n  deleteProject: (id: string) => void;\n  setSelectedTaskId : (id?: string) => void;\n};\n\nconst SideNav: FC<Props> = ({ projectList = [], setSelectedProjectId = () => undefined, selectedProjectId = \"mytask\", addProject = () => undefined, deleteProject = () => undefined, setSelectedTaskId = () => undefined} ) => {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const handleClickOpenDeleteDialog = () => {\n    setDeleteDialogOpen(true);\n  };\n\n  const handleCloseDeleteDialog = () => {\n    setDeleteDialogOpen(false);\n  };\n\n  const handleClickOpenAddDialog = () => {\n    setAddDialogOpen(true);\n  };\n\n  const handleCloseAddDialog = () => {\n    setAddDialogOpen(false);\n  };\n\n  // const handleClickAllButton = () => {\n  //   setSelectedProjectId(\"\");\n  // }\n\n  const handleClickProjectButton = (projectId: string) => {\n    setSelectedProjectId(projectId);\n    setSelectedTaskId(undefined);\n  }\n\n  const handleClickAddButton = (project: Pick<Project, \"title\">) => {\n    addProject(project);\n    setAddDialogOpen(false);\n  }\n\n  const handleClickDeleteButton = (id: string) => {\n    deleteProject(id);\n    setDeleteDialogOpen(false);\n  }\n\n  return (\n    <>\n      <List component=\"nav\">\n      <ListItem key=\"addList\" button onClick={handleClickOpenAddDialog}>\n          <ListItemIcon>\n            <Add></Add>\n          </ListItemIcon>\n          <ListItemText primary=\"リストを追加\"></ListItemText>\n        </ListItem>\n        {/* <ListItem key=\"mytask\" button onClick={handleClickAllButton} selected={selectedProjectId === \"mytask\"}>\n          <ListItemText primary=\"MyTask\"></ListItemText>\n        </ListItem> */}\n        {projectList.map((project) => (\n          <ListItem key={project.id} button onClick={e => handleClickProjectButton(project.id)} selected={project.id === selectedProjectId}>\n            <ListItemText primary={project.title}></ListItemText>\n            <ListItemSecondaryAction>\n            <IconButton onClick={handleClickOpenDeleteDialog} disabled={project.id !== selectedProjectId || project.id === \"mytask\"}>\n              <Delete />\n            </IconButton>\n          </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n      <MessageDialog open={deleteDialogOpen} onClose={handleCloseDeleteDialog} title=\"削除しますか？\" content=\"リストの中身のTODOも削除されます。\" handleClickButton={() => handleClickDeleteButton(selectedProjectId)} />\n      <AddListDialog open={addDialogOpen} onClose={handleCloseAddDialog} handleClickAddButton={handleClickAddButton} />\n    </>\n  );\n};\n\nexport default SideNav;\n","import React, { FC } from \"react\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\nimport SideNav from \"./presentation\";\nimport { TodoState, Project, todoSlice } from \"../../redux/todo\";\n\nconst EnhancedSideNav: FC = () => {\n  const projectList = useSelector<TodoState, { [id: string]: Project }>(\n    (state) => state.projectList\n  );\n  const selectedProjectId = useSelector<TodoState, string>(\n    (state) => state.selectedProjectId\n  );\n  const selectedTaskId = useSelector<TodoState, string | undefined>(\n    (state) => state.selectedTaskId\n  );\n  const dispatch = useDispatch();\n  const { projectCreated, projectDeleted, projectSelected, taskSelected } = todoSlice.actions;\n\n  return (\n    <SideNav\n      projectList={Object.values(projectList)}\n      setSelectedProjectId={(id: string) => dispatch(projectSelected(id))}\n      selectedProjectId={selectedProjectId}\n      addProject={(project: Pick<Project, \"title\">) =>\n        dispatch(projectCreated(project))\n      }\n      deleteProject={(id: string) => dispatch(projectDeleted(id))}\n      setSelectedTaskId={(id?:string) => dispatch(taskSelected(id))}\n    />\n  );\n};\n\nexport default EnhancedSideNav;\n","import React, { FC, useState } from \"react\";\n\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  Divider,\n  IconButton,\n  Grid,\n  Typography,\n  Card,\n  CardActions,\n  CardContent,\n  TextField,\n} from \"@material-ui/core\";\nimport {\n  AccountTree,\n  AutorenewTwoTone,\n  Close,\n  Create,\n  Delete,\n  Description,\n  Edit,\n  LocationOnOutlined,\n  Schedule,\n  Toc,\n} from \"@material-ui/icons\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Task, todoSlice, TodoState } from \"../../redux/todo\";\n\nconst spacer = (top: number, bottom: number) => ({\n  margin: `${top}px 0 ${bottom}px 0`,\n});\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n    },\n    // header: {\n    //   textAlign: \"right\",\n    //   height: \"30px\",\n    // },\n    delete: {\n      marginLeft: \"auto\",\n    },\n    title: {\n      marginLeft: \"30px\",\n    },\n  })\n);\n\nconst TodoDetail: FC = () => {\n  const classes = useStyles();\n\n  const todoList = useSelector<TodoState, { [id: string]: Task }>(\n    (state) => state.todoList\n  );\n  const selectedTaskId = useSelector<TodoState, string | undefined>(\n    (state) => state.selectedTaskId\n  );\n  const { taskUpdated, taskDeleted } = todoSlice.actions;\n  const dispatch = useDispatch();\n\n  const handleChangeTitle = (title: string) => {\n    if (selectedTaskId) {\n      const task = todoList[selectedTaskId];\n      if (task) {\n        const newTask = { ...task, title };\n        handleChange(newTask);\n      }\n    }\n  };\n\n  const handleChangeDeadline = (deadline?: Date | null) => {\n    const deadlineStr = deadline?.toISOString();\n    if (selectedTaskId) {\n      const task = todoList[selectedTaskId];\n      if (task) {\n        const newTask = { ...task, deadline: deadlineStr };\n        handleChange(newTask);\n      }\n    }\n  };\n\n  const handleChangeDescription = (description: string) => {\n    if (selectedTaskId) {\n      const task = todoList[selectedTaskId];\n      if (task) {\n        const newTask = { ...task, description };\n        handleChange(newTask);\n      }\n    }\n  };\n\n  const handleChange = (task: Omit<Task, \"createdAt\">) => {\n    dispatch(taskUpdated(task));\n  };\n\n  const handleClickDeleteButton = () => {\n    if(selectedTaskId){\n      dispatch(taskDeleted(selectedTaskId));\n    }\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardActions>\n        <IconButton className={classes.delete} size=\"small\" onClick={handleClickDeleteButton} disabled={selectedTaskId === undefined}>\n          <Delete />\n        </IconButton>\n      </CardActions>\n      <CardContent>\n        <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justify=\"space-between\"\n          style={spacer(0, 0)}\n        >\n          <Grid item>\n            <Toc />\n          </Grid>\n          <Grid item xs={10}>\n            {/* <Typography variant=\"h5\" component=\"h2\">{todoItem.title}</Typography> */}\n            <TextField\n              disabled={selectedTaskId === undefined}\n              value={selectedTaskId ? (todoList[selectedTaskId] ? todoList[selectedTaskId].title : \"\") : \"\"}\n              onChange={(e) => handleChangeTitle(e.target.value)}\n              placeholder=\"タイトル\"\n            />\n          </Grid>\n        </Grid>\n        <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justify=\"space-between\"\n          style={spacer(20, 0)}\n        >\n          <Grid item>\n            <Schedule />\n          </Grid>\n          <Grid item xs={10}>\n            {/* <Typography>{todoItem.date}</Typography> */}\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"yyyy年M月d日\"\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              label=\"日時\"\n              disabled={selectedTaskId === undefined}\n              value={selectedTaskId ? (todoList[selectedTaskId] ? (todoList[selectedTaskId].deadline ? todoList[selectedTaskId].deadline : null) : null) : null}\n              onChange={(e) => handleChangeDeadline(e)}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justify=\"space-between\"\n          style={spacer(20, 15)}\n        >\n          <Grid item>\n            <Create />\n          </Grid>\n          <Grid item xs={10}>\n            {/* <Typography>{todoItem.description}</Typography> */}\n            <TextField\n              id=\"standard-multiline-flexible\"\n              label=\"詳細\"\n              multiline\n              rowsMax={4}\n              disabled={selectedTaskId === undefined}\n              value={selectedTaskId ? (todoList[selectedTaskId] ? todoList[selectedTaskId].description : \"\") : \"\"}\n              onChange={(e) => handleChangeDescription(e.target.value)}\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TodoDetail;\n","import React, { FC } from \"react\";\nimport \"./App.css\";\n\nimport Navigation from \"./components/Navigation/index\";\nimport TodoList from \"./components/TodoList/index\";\nimport SideNav from \"./components/SideNav/container\";\n\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  Divider,\n  Grid,\n} from \"@material-ui/core\";\nimport TodoDetail from \"./components/TodoDetail\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      minHeight: \"100vh\",\n      width: \"1200px\",\n    },\n    main: {\n      width: \"100%\",\n    },\n    aside: {\n      minWidth: \"230px\",\n    },\n    todoList: {\n      minWidth: \"370px\",\n    },\n  })\n);\n\nconst App: FC = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <aside className={classes.aside}>\n        <SideNav></SideNav>\n      </aside>\n      <Divider orientation=\"vertical\" flexItem />\n      <main className={classes.main}>\n        <Navigation></Navigation>\n        <div style={{ padding: 20 }}>\n          <Grid container spacing={2} justify=\"space-around\">\n            <Grid item xs={3} className={classes.todoList}>\n              <TodoList></TodoList>\n            </Grid>\n            <Grid item xs={6}>\n              <TodoDetail></TodoDetail>\n            </Grid>\n          </Grid>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import storage from \"redux-persist/lib/storage\";\n\nexport const persistConfig = {\n    key: \"root\",\n    storage\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { todoSlice } from \"./redux/todo\";\nimport { persistConfig } from \"./redux/configureStore\";\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  persistStore,\n} from \"redux-persist\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n\nconst persistedReducer = persistReducer(persistConfig, todoSlice.reducer);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </MuiPickersUtilsProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}